# ~~~ SNCB Query5 E2E Benchmark Configuration ~~~

benchmarkName: SNCBQuery5Benchmark
outputFile: sncb_query5_e2e_results.csv

# Parameter that are changed per run with comma separated list
numberOfWorkerThreads: 1,2
numberOfSources: 1

# engine configuration parameter - VM optimized
numberOfBuffersInGlobalBufferManager: 1024
numberOfBuffersPerPipeline: 128
numberOfBuffersInSourceLocalBufferPool: 128
bufferSizeInBytes: 4096

logicalSources:
  - name: sncb
    type: SNCB
    csvPath: /media/psf/Home/Parallels/nebulaQueryAPI/data/selected_columns_df_milliseconds.csv
    minSpeed: 0
    maxSpeed: 120
    minLongitude: 4.0    # Belgium longitude range
    maxLongitude: 6.5
    minLatitude: 49.5    # Belgium latitude range  
    maxLatitude: 51.5

# configure data source - VM optimized
numberOfPreAllocatedBuffer: 1000
dataProvider: Internal
dataProviderMode: ZeroCopy

# Query5: Complex filter with passenger count calculation (fixed formatting)
query: 'Query::from("sncb").map(Attribute("passenger_count") = (Attribute("T1_bar") + Attribute("T2_bar") + Attribute("PCF1_bar") + Attribute("PCF2_bar")) / 4.0).filter(Attribute("passenger_count") > 3.15 && tpointatstbox(Attribute("longitude", BasicType::FLOAT64), Attribute("latitude", BasicType::FLOAT64), Attribute("timestamp", BasicType::UINT64)) == 1).window(SlidingWindow::of(EventTime(Attribute("timestamp", BasicType::UINT64)), Seconds(10), Seconds(5))).apply(Avg(Attribute("passenger_count"))).sink(FileSinkDescriptor::create("sncb_query5_e2e_output.csv", "CSV_FORMAT", "APPEND"));'

gatheringValues: 10000

# benchmark internal parameter - VM optimized
numberOfBuffersToProduce: 1000000
scalability: scale-up
logLevel: LOG_INFO
experimentMeasureIntervalInSeconds: 1
startupSleepIntervalInSeconds: 2
numberOfMeasurementsToCollect: 5